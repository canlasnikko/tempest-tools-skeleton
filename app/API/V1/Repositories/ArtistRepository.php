<?php

namespace App\API\V1\Repositories;

use App\API\V1\Entities\Artist;
use App\Repositories\Repository;
use Doctrine\ORM\Query;
use TempestTools\Crud\Doctrine\Events\GenericEventArgs;
use Doctrine\ORM\Query\Expr;

/** @noinspection LongInheritanceChainInspection */


/**
 * ArtistRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class ArtistRepository extends Repository
{
    protected /** @noinspection ClassOverridesFieldOfSuperClassInspection */
        $entity = Artist::class;


    /**
     * @var array|NULL $options;
     */
    protected $options = [
        'paginate'=>true,
        'hydrate'=>true,
        'hydrationType'=>Query::HYDRATE_ARRAY,
        'transaction'=>true,
        'entitiesShareConfigs'=>true,
        'flush'=>true,
        'placeholders'=>[
            'placeholderTest2'=>[
                'value'=>'some stuff',
            ]
        ]
    ];


    public function preStart(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $array = $this->getArrayHelper()->getArray();
        if (!isset($array['repoEvents'])) {
            $array['repoEvents'] = [];
        }
        $array['repoEvents']['preStart'] = $e->getArgs()->getArrayCopy();
    }

    public function preStop(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['preStop']=$e;
    }

    public function preCreateBatch(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['preCreateBatch']=$e;
    }

    public function preCreate(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['preCreate']=$e;
    }

    public function validateCreate(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['validateCreate']=$e;
    }

    public function verifyCreate(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['verifyCreate']=$e;
    }

    public function processResultsCreate(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['processResultsCreate']=$e;
    }

    public function postCreate(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['postCreate']=$e;
    }

    public function postCreateBatch(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['postCreateBatch']=$e;
    }


    public function preUpdateBatch(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['preUpdateBatch']=$e;
    }

    public function preUpdate(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['preUpdate']=$e;
    }

    public function validateUpdate(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['validateUpdate']=$e;
    }

    public function verifyUpdate(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['verifyUpdate']=$e;
    }

    public function processResultsUpdate(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['processResultsUpdate']=$e;
    }

    public function postUpdate(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['postUpdate']=$e;
    }

    public function postUpdateBatch(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['postUpdateBatch']=$e;
    }


    public function preDeleteBatch(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['preDeleteBatch']=$e;
    }

    public function preDelete(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['preDelete']=$e;
    }

    public function validateDelete(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['validateDelete']=$e;
    }

    public function verifyDelete(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['verifyDelete']=$e;
    }

    public function processResultsDelete(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['processResultsDelete']=$e;
    }

    public function postDelete(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['postDelete']=$e;
    }

    public function postDeleteBatch(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['postDeleteBatch']=$e;
    }
    /**
     * @return array
     */
    public function getTTConfig(): array
    {
        $expr = new Expr();
        return [
            'default'=>[],
            'user'=>[
                'extends'=>[':default']
            ],
            'userArtistWithAlbums'=>[
                'extends'=>[':default'],
                'read'=>[
                    'select'=>[
                        'artistsAndAlbums'=>'a, a2'
                    ],
                    'innerJoin'=>[
                        'justCurrentUsersAlbums'=>[
                            'join'=>'a.albums',
                            'alias'=>'a2',
                        ]
                    ]
                ]
            ],
            'testQuery'=>[
                'extends'=>[':default'],
                'read'=>[
                    'select'=>[
                        'artistsWithCustomAlias'=>'t',
                        'innerJoinTest'=>'a',
                    ],
                    'from'=>[
                        'fromTest'=>[
                            'className'=>Artist::class,
                            'alias'=>'t',
                            'indexBy'=>null,
                        ]
                    ],
                    'where'=>[
                        'exprArrayTest1'=>[
                            'value'=>[
                                'expr'=>'orX',
                                'arguments'=>[
                                    [
                                        'expr'=>'eq',
                                        'arguments'=>[1,1]
                                    ],
                                    [
                                        'expr'=>'neq',
                                        'arguments'=>[0,1]
                                    ],
                                    [
                                        'expr'=>'lt',
                                        'arguments'=>[0,1]
                                    ],
                                    [
                                        'expr'=>'lte',
                                        'arguments'=>[0,1]
                                    ],
                                    [
                                        'expr'=>'gt',
                                        'arguments'=>[1,0]
                                    ],
                                    [
                                        'expr'=>'gte',
                                        'arguments'=>[1,0]
                                    ],
                                    [
                                        'expr'=>'in',
                                        'arguments'=>['t.id',[1,0]]
                                    ],
                                    [
                                        'expr'=>'notIn',
                                        'arguments'=>['t.id',[1,0]]
                                    ],
                                    [
                                        'expr'=>'isNull',
                                        'arguments'=>['t.id']
                                    ],
                                    [
                                        'expr'=>'isNotNull',
                                        'arguments'=>['t.id']
                                    ],
                                    [
                                        'expr'=>'like',
                                        'arguments'=>['t.name', $expr->literal('%BEE%')]
                                    ],
                                    [
                                        'expr'=>'notLike',
                                        'arguments'=>['t.name', $expr->literal('%VAN%')]
                                    ],
                                    [
                                        'expr'=>'between',
                                        'arguments'=>['t.id',0,2]
                                    ]
                                ]
                            ]
                        ],
                        'exprArrayTest2'=>[
                            'type'=>'or',
                            'value'=>[
                                'expr'=>'eq',
                                'arguments'=>[
                                    1, 1
                                ]
                            ]
                        ],
                        'exprArrayTest3'=>[
                            'type'=>'and',
                            'value'=>$expr->eq(1, 1)
                        ],
                    ],
                    'having'=>[
                        'havingTest1'=>[
                            'value'=>$expr->eq(1, 1)
                        ],
                        'havingTest2'=>[
                            'type'=>'and',
                            'value'=>$expr->eq(1, 1)
                        ],
                        'havingTest3'=>[
                            'type'=>'or',
                            'value'=>$expr->eq(1, 1)
                        ]
                    ],
                    'innerJoin'=>[
                        'innerJoinTest'=>[
                            'join'=>'t.albums',
                            'alias'=>'a',
                            'conditionType'=>Expr\Join::WITH,
                            'condition'=>$expr->eq(1, 1),
                            'indexBy'=>null,
                        ]
                    ],
                    'leftJoin'=>[
                        'leftJoinTest'=>[
                            'join'=>'t.albums',
                            'alias'=>'a2',
                            'conditionType'=>Expr\Join::WITH,
                            'condition'=>$expr->eq(1, 1),
                            'indexBy'=>null,
                        ]
                    ],
                    'orderBy'=>[
                        'testOrderBy'=>[
                            'sort'=>'t.id',
                            'order'=>'DESC'
                        ]
                    ],
                    'groupBy'=>[
                        'groupByTest'=>'t.name'
                    ],
                ],
                'settings'=>[
                    'cache'=>[
                        'useQueryCache'=>false,
                        'useResultCache'=>true,
                        'timeToLive'=>777,
                        'cacheId'=>'test_cache_id',
                    ],
                    'placeholders'=>[
                        'placeholderTest'=>[
                            'value'=>'some stuff2',

                        ]
                    ],
                    'fetchJoin'=>true
                ]
            ],
            'testing'=>[]
        ];
    }
}
